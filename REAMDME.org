* 璀璨宝石

** 基本架构
简单的客户端/服务器架构，两者通过基于 TCP 的自定义消息格式通信，
TCP 是字节流协议，只负责把一个个字节发送到对方主机，字节的含义由我们自己定义

** 服务器
服务器负责维护玩家状态信息，包括：
| 玩家编号       |
| 玩家就绪状态   |
| 玩家筹码状态   |
| 玩家宝石牌状态 |
| 玩家贵族牌状态 |
以及当前可获取的卡牌(下称棋盘)信息：

** 客户端
客户端需要负责与服务器通信以获取所有玩家状态，棋盘信息，绘制界面并处理用户交互

** 交互消息格式
| API ID  | 玩家编号 | 消息长度(单位为 bytes) | 保留    | 消息体 |
|---------+----------+------------------------+---------+--------|
| 4 bytes | 8 bytes  | 8 bytes                | 8 bytes | 不定   |

API ID 是一个 32 位无符号整数

玩家编号是一个 64 位无符号整数

消息长度为 4 + 8 + 8 + 8 + 消息体长度，单位为字节

消息体统一为 json 字符串，可以为空，具体内容见下节

** 消息类型

*** API ID = 1: INIT
INIT 消息，客户端启动后向服务器发送的第一条消息，表示新客户端上线，
并且向服务器请求获得自己的玩家编号
具体地：
| API ID | 玩家编号 | 消息长度(单位为 bytes) | 保留 | 消息体 |
|--------+----------+------------------------+------+--------|
|      1 |        0 |                     28 |    0 | None   |

*** API ID = 2: INIT_RESP
INIT RESP 消息是服务器对于 INIT 的回复，回复包含分配给自己的玩家编号，
以及所有其它玩家的玩家编号
具体地
| API ID | 玩家编号 | 消息长度(单位为 bytes) | 保留 | 消息体 |
|--------+----------+------------------------+------+--------|
|      2 |        0 | 运行时计算             |    0 | string |

string 是 json 格式字符串，一个示例如下
#+begin_src json
  {
    "allocated_player_id": 3,
    "other_player_id": [1, 2]
  }
#+end_src
这样表明客户端分配到的玩家编号为3，以后的消息就要将 3 填入玩家编号字段，
这盘游戏已经有两个玩家了，他们的编号是 2，3

*** API ID = 3: PLAYER_READY
PLAYER_READY 由客户端在玩家准备就绪时发送给服务器，并由服务器转发给其它玩家，
所以客户端既会发送这条消息又会接受到这条消息
具体地
| API ID | 玩家编号   | 消息长度(单位为 bytes) | 保留 | 消息体 |
|--------+------------+------------------------+------+--------|
|      3 | 运行时计算 |                     28 |    0 | None   |

*** API ID = 4: GAME_START
所有玩家准备就绪之后由服务器广播给所有玩家，消息体包含全局游戏信息





** Code Style

*** 一行不宜超过 80 列 

*** 永远不要使用 Tab 作为缩进

*** 使用四个空格作为缩进

*** 类名
驼峰命名法，即首字母大写，不使用下划线，如 LevelOneCard

*** 方法名
首单词小写，其后驼峰，如 sendInitMsg

*** 常量
全大写，使用下划线连接，如 PLAYER_READY_API_ID

*** 空行
类方法之间空一行，普通函数空两行
